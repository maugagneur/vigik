import kotlinx.kover.gradle.plugin.dsl.AggregationType
import kotlinx.kover.gradle.plugin.dsl.KoverReportExtension
import kotlinx.kover.gradle.plugin.dsl.MetricType
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.kotlin.dsl.configure

class KoverConventionPlugin : Plugin<Project> {
    override fun apply(target: Project) {
        with(target) {
            pluginManager.apply("org.jetbrains.kotlinx.kover")

            configure<KoverReportExtension> {
                // Report generation task can be run with "./gradlew koverHtmlReportDebug"
                androidReports("debug") {
                    filters {
                        excludes {
                            annotatedBy(
                                "androidx.compose.runtime.Composable",
                                "com.kidor.vigik.utils.ExcludedFromKoverReport"
                            )
                            classes(
                                "*Activity*",           // Ignore activities
                                "*.*Application*",      // Ignore application class
                                "*.BuildConfig",
                                "*.*_Factory*",         // Ignore ViewModel factory classes generated by Hilt
                                "*.*_MembersInjector*", // Ignore Hilt generated classes for receivers
                                "*.*Hilt*",             // Ignore other Hilt generated classes
                                "*.*_Impl*"             // Ignore Room and Worker generated classes
                            )
                            packages(
                                "hilt_aggregated_deps",         // Ignore Hilt generated files
                                "com.kidor.vigik.car",          // Ignore classes for Android Car
                                "com.kidor.vigik.di",           // Ignore dependency injection module classes
                                "com.kidor.vigik.ui.compose"    // Ignore classes related to UI theme and navigation
                            )
                        }
                    }
                    html {
                        onCheck = true
                    }
                    // Verify task can be run with "./gradlew koverVerifyDebug"
                    verify {
                        rule("Minimal line coverage rate") {
                            isEnabled = true
                            bound {
                                aggregation = AggregationType.COVERED_PERCENTAGE
                                metric = MetricType.LINE
                                minValue = 60
                            }
                        }
                    }
                }
            }
        }
    }
}
