plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'androidx.navigation.safeargs'
    id 'jacoco'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk sdkVer.compile

    defaultConfig {
        applicationId "com.kidor.vigik"
        minSdk sdkVer.min
        targetSdk sdkVer.target
        versionCode 1
        versionName "1.0.0-alpha.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }

    buildFeatures {
        viewBinding true
    }
    buildTypes {
        debug {
            testCoverageEnabled false // Set to false because JaCoCo 0.8.7 fails to work with dagger/hilt
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    sourceSets {
        final String SHARED_TEST_DIR = 'src/sharedTest/java'
        test.java.srcDirs += SHARED_TEST_DIR
        androidTest.java.srcDirs += SHARED_TEST_DIR
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('"$buildDir/reports/')
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Custom task to merge code coverage reports from unit and instrumentation tests
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/*Args*.*',          // filtering Navigation Component generated classes
            '**/*Directions*.*',    // filtering Navigation Component generated classes
            '**/databinding/**',    // filtering Data Binding generated classes
            'android/**/*.*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(
            fileTree(dir: project.buildDir, includes: [
                    'jacoco/testDebugUnitTest.exec',
                    'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
            ])
    )
}

dependencies {
    // Android X
    implementation "androidx.appcompat:appcompat:${androidxVer.appCompat}"
    implementation "androidx.constraintlayout:constraintlayout:${androidxVer.constraintlayout}"
    implementation "androidx.core:core-ktx:${androidxVer.coreKtx}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${androidxVer.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${androidxVer.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${androidxVer.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${androidxVer.lifecycle}"
    implementation "androidx.navigation:navigation-fragment-ktx:${androidxVer.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${androidxVer.navigation}"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:${androidxVer.navigation}"
    implementation "androidx.recyclerview:recyclerview:${androidxVer.recyclerview}"
    implementation "androidx.room:room-runtime:${androidxVer.room}"
    implementation "androidx.room:room-ktx:${androidxVer.room}"
    kapt "androidx.room:room-compiler:${androidxVer.room}"

    // Kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinVer.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${kotlinVer.coroutines}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${kotlinVer.coroutines}"

    // Material
    implementation "com.google.android.material:material:${androidxVer.material}"

    // Dependency Injection
    implementation "com.google.dagger:hilt-android:${androidxVer.hilt}"
    kapt "com.google.dagger:hilt-compiler:${androidxVer.hilt}"

    // Log
    implementation "com.jakewharton.timber:timber:$timberVer"

    // Test
    testImplementation "junit:junit:${testVer.junit}"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${testVer.mockitoKotlin}"
    testImplementation "androidx.arch.core:core-testing:${testVer.coreTesting}"
    androidTestImplementation "androidx.test.ext:junit:${testVer.testExt}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${testVer.espresso}"

    // Testing Navigation
    // debugImplementation is used here so that the empty activity that FragmentScenario relies on is accessible by the test target process.
    debugImplementation "androidx.fragment:fragment-testing:${androidxVer.fragment}"
    androidTestImplementation "androidx.navigation:navigation-testing:${androidxVer.navigation}"
}